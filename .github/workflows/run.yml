name: form-example

on:
 workflow_dispatch:
  inputs:
   input_node:
    description: 'Input Node Name.'
    required: true
 
    
jobs:
  excel-graph:
    env:
      #input_compo: "Tlmf"
      input_compo: '["Tlmf","Lcd","Bsm","DestJdg","OmiArb"]'
    runs-on: windows-latest
    outputs:
      compo_list:  ${{ steps.create_unittest_brach.outputs.compo_list }}
      compo_testtype:  ${{ steps.create_unittest_brach.outputs.compo_testtype }}
      targetcompolist:  ${{ steps.create_unittest_brach.outputs.targetcompolist }}
    steps:
    - uses: actions/checkout@v3
    - name: Create UnitTest Branch
      id: create_unittest_brach
      run: |
       $targetcompo='["Tlmf","Lcd","Bsm","DestJdg","OmiArb"]'
       #echo "${targetcompo}"
       echo "0"
       $compo_testtype = @()
       echo "1"
       foreach ($compo in ($targetcompo | ConvertFrom-Json)) {
         echo "compo=$compo"
         if ($compo -ne "Bsm"){
           $test_type = "csv"
         }else{
           $test_type = "mix"
         }
         $compo_testtype += @( @{Name = "$compo"; Type = "$test_type"})
       }
       foreach ($item in $compo_testtype) {
         echo("Name: " + $item.Name + ", Type: " + $item.Type)
       }
       echo "compo_testtype=$compo_testtype" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
       echo "compo_testtype=$compo_testtype"
       $test_type = ($compo_testtype | Where-Object { $_.Name -eq 'Bsm' }).Type
       echo "testtype=${test_type}"
       #$test_type = (\(compo_testtype | Where-Object {\)_.Name -eq 'Bsm'}).Type
       echo "testtype2=${test_type}"
       echo "testtype3=$test_type"
       #testtype='["csv","mix","csv","gtest","csv"]'
       #echo "testtype=${testtype}" >> $GITHUB_OUTPUT

       #echo "input_compo=${env.input_compo}"
       #echo "input_compo=${{fromJson( env.input_compo )}}"

       $compo_list += "["
       echo "compo_list=$compo_list"

       foreach ($comp_info in $compo_testtype) {
          $compo_list += "`""
          $compo_list += $comp_info.Name
          $compo_list += "`""
          $compo_list += ","
       }
       $compo_list += "]"
       $compo_list = $compo_list -replace '\,]',']'
       echo "compo_list_2=$compo_list"
       echo "compo_list=$compo_list" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
       
    - name: Create UnitTest Branch
      if :  (${{ steps.create_unittest_brach.outputs.compo_testtype }} | Where-Object { $_.Name -eq 'Bsm' }).Type == 'csv'
      run: |
        echo "compo=Tlmf"
        echo "compo_if=$_.Name"
        echo "compo_if=${{ steps.create_unittest_brach.outputs.compo_testtype }}"

  Exec_GTestConvTool:
    runs-on: windows-latest
    needs: excel-graph
    strategy:
      max-parallel: 2
      matrix:
        compolist: ${{fromJson(needs.excel-graph.outputs.compo_list)}}
    steps:
    - uses: actions/checkout@v3
    - name: check
      run: |
        pwd
        dir
        cd ./.github
        dir
        cd ./workflows
        dir
    - name: Create UnitTest Branch
      if :  (${{ needs.excel-graph.outputs.compo_testtype }} | Where-Object { $_.Name -eq '${{ matrix.compolist }}' }).Type == 'csv'
      run: |
        echo "compo_if=${{ needs.excel-graph.outputs.compo_testtype }}"
        echo "compo=${{ matrix.compolist }}"
        #$test_compo_type_list=${{ needs.excel-graph.outputs.compo_testtype }}
        #echo "test_compo_type_list=${test_compo_type_list}"
        #echo "type=$(${{ steps.create_unittest_brach.outputs.compo_testtype }} | Where-Object { $_.Name -eq "${{ matrix.compolist }} }).Type}}"
        #$test_type=($test_compo_type_list | Where-Object { $_.Name -eq "${{ matrix.compolist }}" }).Type
        #$test_type=(${{ needs.excel-graph.outputs.compo_testtype }}.GetEnumerator() | Where-Object { $_.Name -eq "${{ matrix.compolist }}" }).Type
        #$test_type=${ needs.excel-graph.outputs.compo_testtype | Where-Object {$_.Name -eq "start"} | Select-Object -ExpandProperty Type }
        #echo "test_type=${test_type}"
  Exec_ECU-Build:
    runs-on: windows-latest
    needs: [excel-graph,Exec_GTestConvTool]
    strategy:
      max-parallel: 2
      matrix:
        compolist: ${{fromJson(needs.excel-graph.outputs.compo_list)}}
    if: always()
    steps:
      - name: Clean self-hosted runner
        run: |
          echo "Exec_ECU-Build"
          echo ${{ matrix.compolist }}
